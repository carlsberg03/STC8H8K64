C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ZF_PWM
OBJECT MODULE PLACED IN .\Out_File\zf_pwm.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_pwm.c LARGE OMF2 OPTIMIZE(8,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\
                    -inc;..\USER\src;..\CODE) DEBUG PRINT(.\Out_File\zf_pwm.lst) OBJECT(.\Out_File\zf_pwm.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file                pwm
  11           * @company                     成都逐飞科技有限公司
  12           * @author              逐飞科技(QQ790875685)
  13           * @version             查看doc内version文件 版本说明
  14           * @Software            MDK5.27
  15           * @Target core         STC8H8K64S4
  16           * @Taobao              https://seekfree.taobao.com/
  17           * @date                2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          #include "zf_pwm.h"
  21          #include "board.h"
  22          #include "zf_gpio.h"
  23          #include "zf_uart.h"
  24          #include "stdio.h"
  25          
  26          
  27          
  28          #define PWM1_CCMR1_ADDR  0xfec8 //CCMR2_ADDR = CCMR1_ADDR + 1
  29          #define PWM1_CCR1_ADDR   0xfed5 //CCR2_ADDR = CCR1_ADDR + 2
  30          #define PWM1_CCER1_ADDR  0xfecc //CCER2_ADDR = CCER1_ADDR + 1
  31          
  32          #define PWM2_CCMR1_ADDR  0xfee8 //CCMR2_ADDR = CCMR1_ADDR + 1
  33          #define PWM2_CCR1_ADDR   0xfef5 //CCR2_ADDR = CCR1_ADDR + 2
  34          #define PWM2_CCER1_ADDR  0xfeec //CCER2_ADDR = CCER1_ADDR + 1
  35          
  36          //--------------------------------------------------------------------------------------------------------
             ------------
  37          //  @brief      PWM_gpio初始化（内部使用用户无需关心）
  38          //  @param      pwmch       PWM通道号及引脚
  39          //  @return     void
  40          //  Sample usage:           
  41          //--------------------------------------------------------------------------------------------------------
             ------------
  42          void pwm_set_gpio(PWMCH_enum pwmch)
  43          {
  44   1              switch(pwmch)
  45   1              {
  46   2                      case PWM1P_P10:
  47   2                      {
  48   3                              gpio_mode(P1_0,GPO_PP);
  49   3                              break;
C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 2   

  50   3                      }
  51   2                      case PWM1N_P11:
  52   2                      {
  53   3                              gpio_mode(P1_1,GPO_PP);
  54   3                              break;
  55   3                      }
  56   2                      case PWM1P_P20:
  57   2                      {
  58   3                              gpio_mode(P2_0,GPO_PP);
  59   3                              break;
  60   3                      }
  61   2                      case PWM1N_P21:
  62   2                      {
  63   3                              gpio_mode(P2_1,GPO_PP);
  64   3                              break;
  65   3                      }
  66   2                      case PWM1P_P60:
  67   2                      {
  68   3                              gpio_mode(P6_0,GPO_PP);
  69   3                              break;
  70   3                      }
  71   2                      case PWM1N_P61:
  72   2                      {
  73   3                              gpio_mode(P6_1,GPO_PP);
  74   3                              break;
  75   3                      }
  76   2                      
  77   2                      case PWM2P_P12:
  78   2                      {
  79   3                              gpio_mode(P1_2,GPO_PP);
  80   3                              break;
  81   3                      }
  82   2                      case PWM2N_P13:
  83   2                      {
  84   3                              gpio_mode(P1_3,GPO_PP);
  85   3                              break;
  86   3                      }
  87   2                      case PWM2P_P22:
  88   2                      {
  89   3                              gpio_mode(P2_2,GPO_PP);
  90   3                              break;
  91   3                      }
  92   2                      case PWM2N_P23:
  93   2                      {
  94   3                              gpio_mode(P2_3,GPO_PP);
  95   3                              break;
  96   3                      }
  97   2                      case PWM2P_P62:
  98   2                      {
  99   3                              gpio_mode(P6_2,GPO_PP);
 100   3                              break;
 101   3                      }
 102   2                      case PWM2N_P63:
 103   2                      {
 104   3                              gpio_mode(P6_3,GPO_PP);
 105   3                              break;
 106   3                      }
 107   2                      
 108   2                      case PWM3P_P14:
 109   2                      {
 110   3                              gpio_mode(P1_4,GPO_PP);
 111   3                              break;
C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 3   

 112   3                      }
 113   2                      case PWM3N_P15:
 114   2                      {
 115   3                              gpio_mode(P1_5,GPO_PP);
 116   3                              break;
 117   3                      }
 118   2                      case PWM3P_P24:
 119   2                      {
 120   3                              gpio_mode(P2_4,GPO_PP);
 121   3                              break;
 122   3                      }
 123   2                      case PWM3N_P25:
 124   2                      {
 125   3                              gpio_mode(P2_5,GPO_PP);
 126   3                              break;
 127   3                      }
 128   2                      case PWM3P_P64:
 129   2                      {
 130   3                              gpio_mode(P6_4,GPO_PP);
 131   3                              break;
 132   3                      }
 133   2                      case PWM3N_P65:
 134   2                      {
 135   3                              gpio_mode(P6_5,GPO_PP);
 136   3                              break;
 137   3                      }
 138   2                      
 139   2                      
 140   2                      case PWM4P_P16:
 141   2                      {
 142   3                              gpio_mode(P1_6,GPO_PP);
 143   3                              break;
 144   3                      }
 145   2                      case PWM4N_P17:
 146   2                      {
 147   3                              gpio_mode(P1_7,GPO_PP);
 148   3                              break;
 149   3                      }
 150   2                      case PWM4P_P26:
 151   2                      {
 152   3                              gpio_mode(P2_6,GPO_PP);
 153   3                              break;
 154   3                      }
 155   2                      case PWM4N_P27:
 156   2                      {
 157   3                              gpio_mode(P2_7,GPO_PP);
 158   3                              break;
 159   3                      }
 160   2                      case PWM4P_P66:
 161   2                      {
 162   3                              gpio_mode(P6_6,GPO_PP);
 163   3                              break;
 164   3                      }
 165   2                      case PWM4N_P67:
 166   2                      {
 167   3                              gpio_mode(P6_7,GPO_PP);
 168   3                              break;
 169   3                      }
 170   2                      case PWM4P_P34:
 171   2                      {
 172   3                              gpio_mode(P3_4,GPO_PP);
 173   3                              break;
C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 4   

 174   3                      }
 175   2                      case PWM4N_P33:
 176   2                      {
 177   3                              gpio_mode(P3_3,GPO_PP);
 178   3                              break;
 179   3                      }
 180   2                      
 181   2                      
 182   2                      case PWM5_P20:
 183   2                      {
 184   3                              gpio_mode(P2_0,GPO_PP);
 185   3                              break;
 186   3                      }
 187   2                      case PWM5_P17:
 188   2                      {
 189   3                              gpio_mode(P1_7,GPO_PP);
 190   3                              break;
 191   3                      }
 192   2                      case PWM5_P00:
 193   2                      {
 194   3                              gpio_mode(P0_0,GPO_PP);
 195   3                              break;
 196   3                      }
 197   2                      case PWM5_P74:
 198   2                      {
 199   3                              gpio_mode(P7_4,GPO_PP);
 200   3                              break;
 201   3                      }
 202   2                      
 203   2                      case PWM6_P21:
 204   2                      {
 205   3                              gpio_mode(P2_1,GPO_PP);
 206   3                              break;
 207   3                      }
 208   2                      case PWM6_P54:
 209   2                      {
 210   3                              gpio_mode(P5_4,GPO_PP);
 211   3                              break;
 212   3                      }
 213   2                      case PWM6_P01:
 214   2                      {
 215   3                              gpio_mode(P0_1,GPO_PP);
 216   3                              break;
 217   3                      }
 218   2                      case PWM6_P75:
 219   2                      {
 220   3                              gpio_mode(P7_5,GPO_PP);
 221   3                              break;
 222   3                      }
 223   2      
 224   2                      
 225   2                      case PWM7_P22:
 226   2                      {
 227   3                              gpio_mode(P2_2,GPO_PP);
 228   3                              break;
 229   3                      }
 230   2                      case PWM7_P33:
 231   2                      {
 232   3                              gpio_mode(P3_3,GPO_PP);
 233   3                              break;
 234   3                      }
 235   2                      case PWM7_P02:
C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 5   

 236   2                      {
 237   3                              gpio_mode(P0_2,GPO_PP);
 238   3                              break;
 239   3                      }
 240   2                      case PWM7_P76:
 241   2                      {
 242   3                              gpio_mode(P7_6,GPO_PP);
 243   3                              break;
 244   3                      }
 245   2      
 246   2                      
 247   2                      case PWM8_P23:
 248   2                      {
 249   3                              gpio_mode(P2_3,GPO_PP);
 250   3                              break;
 251   3                      }
 252   2                      case PWM8_P34:
 253   2                      {
 254   3                              gpio_mode(P3_4,GPO_PP);
 255   3                              break;
 256   3                      }
 257   2                      case PWM8_P03:
 258   2                      {
 259   3                              gpio_mode(P0_3,GPO_PP);
 260   3                              break;
 261   3                      }
 262   2                      case PWM8_P77:
 263   2                      {
 264   3                              gpio_mode(P7_7,GPO_PP);
 265   3                              break;
 266   3                      }
 267   2                      
 268   2              }
 269   1              
 270   1      }
 271                  
 272                  
 273          //--------------------------------------------------------------------------------------------------------
             ------------
 274          //  @brief      PWM初始化
 275          //  @param      pwmch       PWM通道号及引脚
 276          //  @param      freq        PWM频率
 277          //  @param      duty        PWM占空比
 278          //  @return     void
 279          //  Sample usage:           
 280          //                                                      pwm_init(PWM0_P00, 100, 5000);     //初始化PWM0  使用引脚P0.0  输出PWM频率100HZ   占空比为百分之 
             -5000/PWM_DUTY_MAX*100
 281          //                                                      PWM_DUTY_MAX在zf_pwm.h文件中 默认为10000
 282          //--------------------------------------------------------------------------------------------------------
             ------------
 283          void pwm_init(PWMCH_enum pwmch,uint32 freq, uint16 duty)
 284          {
 285   1              uint16 match_temp;
 286   1              uint16 period_temp; 
 287   1              uint16 freq_div = 0;
 288   1              P_SW2 |= 0x80;
 289   1              //GPIO需要设置为推挽输出
 290   1              pwm_set_gpio(pwmch);
 291   1              //分频计算，周期计算，占空比计算
 292   1              freq_div = (sys_clk / freq) >> 16;                                                      //多少分频
 293   1              period_temp = sys_clk / freq / (freq_div + 1) - 1;                      //周期
 294   1              match_temp = period_temp * ((float)duty / PWM_DUTY_MAX);        //占空比
C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 6   

 295   1              if(PWM5_P20 <= pwmch)                           //PWM5-8
 296   1              {
 297   2                      //通道选择，引脚选择
 298   2                      PWM2_ENO |= (1 << ((2 * ((pwmch >> 4) - 4))));                                  //使能通道      
 299   2                      PWM2_PS |= ((pwmch & 0x03) << ((2 * ((pwmch >> 4) - 4))));              //输出脚选择
 300   2                      // 配置通道输出使能和极性       
 301   2                      (*(unsigned char volatile xdata *)(PWM2_CCER1_ADDR + (((pwmch >> 4) - 4) >> 1))) |= (1 << (((pwmch >> 4)
             - & 0x01) * 4));
 302   2                      //功能设置
 303   2                      (*(unsigned char volatile xdata *)(PWM2_CCMR1_ADDR + ((pwmch >> 4) - 4))) |= 0x06<<4;   //设置为PWM模式1
 304   2                      (*(unsigned char volatile xdata *)(PWM2_CCMR1_ADDR + ((pwmch >> 4) - 4))) |= 1<<3;              //开启PWM2_CCR1 寄存
             -器的预装载功能
 305   2                      //周期
 306   2                      PWM2_ARR = period_temp;
 307   2                      //设置预分频
 308   2                      PWM2_PSCR = freq_div;
 309   2                      //设置捕获值|比较值
 310   2                      (*(unsigned int volatile xdata *)(PWM2_CCR1_ADDR + 2 * ((pwmch >> 4) - 4))) = match_temp;
 311   2                      PWM2_BKR = 0x80;        //主输出使能 相当于总开关
 312   2                      PWM2_CR1 = 0x01;        //PWM开始计数
 313   2              }
 314   1              else
 315   1              {
 316   2                      PWM1_ENO |= (1 << (pwmch & 0x01)) << ((pwmch >> 4) * 2);        //使能通道      
 317   2                      PWM1_PS  |= ((pwmch & 0x07) >> 1) << ((pwmch >> 4) * 2);    //输出脚选择
 318   2                      // 配置通道输出使能和极性
 319   2                      (*(unsigned char volatile xdata *)(PWM1_CCER1_ADDR + (pwmch >> 5))) |= (1 << ((pwmch & 0x01) * 2 + ((pwm
             -ch >> 4) & 0x01) * 0x04));
 320   2                      (*(unsigned char volatile xdata *)(PWM1_CCMR1_ADDR + (pwmch >> 4))) |= 0x06<<4;         //设置为PWM模式1
 321   2                      (*(unsigned char volatile xdata *)(PWM1_CCMR1_ADDR + (pwmch >> 4))) |= 1<<3;            //开启PWM1_CCR1 寄存器的预
             -装载功能
 322   2                      //周期
 323   2                      PWM1_ARR = period_temp;
 324   2                      //设置预分频
 325   2                      PWM1_PSCR = freq_div;
 326   2                      //设置捕获值|比较值
 327   2                      (*(unsigned int volatile xdata *)(PWM1_CCR1_ADDR + 2 * (pwmch >> 4))) = match_temp;
 328   2                      PWM1_BKR = 0x80;        // 主输出使能 相当于总开关
 329   2                      PWM1_CR1 = 0x01;        //PWM开始计数
 330   2              }
 331   1      //      P_SW2 &= 0x7F;
 332   1      }
 333          
 334          //--------------------------------------------------------------------------------------------------------
             ------------
 335          //  @brief      PWM占空比设置
 336          //  @param      pwmch       PWM通道号及引脚
 337          //  @param      duty        PWM占空比
 338          //  @return     void
 339          //  Sample usage:           pwm_duty(PWM0_P00, 5000);     //初始化PWM0  使用引脚P0.0  输出PWM频率50HZ   占
             -空比为百分之 5000/PWM_DUTY_MAX*100
 340          //                                                      PWM_DUTY_MAX在fsl_pwm.h文件中 默认为10000
 341          //--------------------------------------------------------------------------------------------------------
             ------------
 342          void pwm_duty(PWMCH_enum pwmch, uint16 duty)
 343          {
 344   1              uint16 match_temp;
 345   1              
 346   1      //      P_SW2 |= 0x80;
 347   1              if(PWM5_P20 <= pwmch)                           //PWM5-8
 348   1              {
 349   2                      match_temp = (uint16)(PWM2_ARR * ((float)duty/PWM_DUTY_MAX));                           //占空比
C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 7   

 350   2                      (*(unsigned int volatile xdata *)(PWM2_CCR1_ADDR + 2 * ((pwmch >> 4) - 4))) = match_temp;
 351   2              }
 352   1              else
 353   1              {
 354   2                      match_temp = (uint16)(PWM1_ARR * ((float)duty/PWM_DUTY_MAX));                           //占空比
 355   2                      (*(unsigned int volatile xdata *)(PWM1_CCR1_ADDR + 2 * (pwmch >> 4))) = match_temp;
 356   2              }
 357   1              
 358   1      
 359   1      //      P_SW2 &= ~0x80;
 360   1              
 361   1      }
 362          
 363          
 364          //--------------------------------------------------------------------------------------------------------
             ------------
 365          //  @brief      PWM频率设置
 366          //  @param      pwmch       PWM通道号及引脚
 367          //  @param      freq        PWM频率
 368          //  @param      duty        PWM占空比
 369          //  @return     void
 370          //  Sample usage:           pwm_freq(PWM0_P00, 50, 5000);     //修改化PWM0  使用引脚P0.0  输出PWM频率50HZ 
             -  占空比为百分之 5000/PWM_DUTY_MAX*100
 371          //--------------------------------------------------------------------------------------------------------
             ------------
 372          void pwm_freq(PWMCH_enum pwmch, uint32 freq, uint16 duty)
 373          {
 374   1              uint32 match_temp;
 375   1          uint32 period_temp; 
 376   1              uint8 freq_div = 0;
 377   1              
 378   1              freq_div = (sys_clk/freq)>>15;                                                          //预分频值
 379   1              period_temp = sys_clk/freq/(freq_div + 1);                                      //周期
 380   1              match_temp = period_temp*((float)duty/PWM_DUTY_MAX);    //占空比
 381   1              
 382   1      //      P_SW2 |= 0x80;
 383   1              
 384   1              
 385   1              if(PWM5_P20 <= pwmch)                           //PWM5-8
 386   1              {
 387   2                      //周期
 388   2                      PWM2_ARR = period_temp;
 389   2                      //设置预分频
 390   2                      PWM2_PSCR = freq_div;
 391   2                      //设置捕获值|比较值
 392   2                      (*(unsigned int volatile xdata *)(PWM2_CCR1_ADDR + 2 * ((pwmch >> 4) - 4))) = match_temp;
 393   2              }
 394   1              else
 395   1              {
 396   2                      //周期
 397   2                      PWM1_ARR = period_temp;
 398   2                      //设置预分频
 399   2                      PWM1_PSCR = freq_div;
 400   2                      //设置捕获值|比较值
 401   2                      (*(unsigned int volatile xdata *)(PWM1_CCR1_ADDR + 2 * (pwmch >> 4))) = match_temp;
 402   2              }
 403   1              
 404   1      //      P_SW2 &= ~0x80;
 405   1      }
 406          
 407          

C51 COMPILER V9.60.0.0   ZF_PWM                                                            04/25/2022 23:42:57 PAGE 8   


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1633    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
