C51 COMPILER V9.60.0.0   OLED                                                              04/19/2022 15:33:23 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Out_File\oled.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\USER\src\oled.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Libr
                    -aries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\inc;..\USER\src;..\CODE) 
                    -DEBUG PRINT(.\Out_File\oled.lst) OBJECT(.\Out_File\oled.obj)

line level    source

   1          #include "oled.h"
   2          
   3          #define uint8_t unsigned char
   4          #define int8_t  char
   5          #define LCD_DC  OLED_DC   //E11
   6          #define LCD_RST OLED_RST   //E12
   7          #define LCD_SDA OLED_D1   //D12
   8          #define LCD_SCL OLED_D0   //D11
   9          
  10          #define LCD_SCL_CLR()   OLED_D0=0
  11          #define LCD_SCL_SET()   OLED_D0=1
  12          
  13          #define LCD_SDA_CLR()   OLED_D1=0
  14          #define LCD_SDA_SET()   OLED_D1=1
  15          
  16          #define LCD_RST_CLR()   OLED_RST=0
  17          #define LCD_RST_SET()   OLED_RST=1
  18          
  19          #define LCD_DC_CLR()    OLED_DC=0
  20          #define LCD_DC_SET()    OLED_DC=1
  21          
  22          #define X_WIDTH 128
  23          uint8_t code F6x8[][6] =
  24          {
  25            { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
  26            { 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
  27            { 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
  28            { 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
  29            { 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
  30            { 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
  31            { 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
  32            { 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
  33            { 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
  34            { 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
  35            { 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
  36            { 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
  37            { 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
  38            { 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
  39            { 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
  40            { 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
  41            { 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
  42            { 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
  43            { 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
  44            { 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
  45            { 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
  46            { 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
  47            { 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
  48            { 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
  49            { 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
  50            { 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
  51            { 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
  52            { 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
  53            { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
C51 COMPILER V9.60.0.0   OLED                                                              04/19/2022 15:33:23 PAGE 2   

  54            { 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
  55            { 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
  56            { 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
  57            { 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
  58            { 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
  59            { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
  60            { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
  61            { 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
  62            { 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
  63            { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
  64            { 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
  65            { 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
  66            { 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
  67            { 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
  68            { 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
  69            { 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
  70            { 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
  71            { 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
  72            { 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
  73            { 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
  74            { 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
  75            { 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
  76            { 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
  77            { 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
  78            { 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
  79            { 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
  80            { 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
  81            { 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
  82            { 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
  83            { 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
  84            { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
  85            { 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
  86            { 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
  87            { 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
  88            { 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
  89            { 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
  90            { 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
  91            { 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
  92            { 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
  93            { 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
  94            { 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
  95            { 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
  96            { 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
  97            { 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
  98            { 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
  99            { 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
 100            { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
 101            { 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
 102            { 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
 103            { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
 104            { 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
 105            { 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
 106            { 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
 107            { 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
 108            { 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
 109            { 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
 110            { 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
 111            { 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
 112            { 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
 113            { 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
 114            { 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
 115            { 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
C51 COMPILER V9.60.0.0   OLED                                                              04/19/2022 15:33:23 PAGE 3   

 116            { 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
 117          };
 118          
 119          
 120          void OLED_Init(void)
 121          { 
 122   1        LCD_SCL=1;
 123   1        //LCD_CS=1;   //预制SLK和SS为高电平               
 124   1        LCD_RST=0;
 125   1        delay_ms(50);
 126   1        LCD_RST=1;
 127   1              
 128   1        OLED_WrCmd(0xae);//--turn off oled panel
 129   1        OLED_WrCmd(0x00);//---set low column address
 130   1        OLED_WrCmd(0x10);//---set high column address
 131   1        OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 132   1        OLED_WrCmd(0x81);//--set contrast controlregister
 133   1        OLED_WrCmd(0xcf); // Set SEG Output Current Brightness
 134   1        OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
 135   1        OLED_WrCmd(0xc8);//Set COM/ROLED_WrDatow Scan Direction   0xc0上下反置 0xc8正常
 136   1        OLED_WrCmd(0xa6);//--set normal display
 137   1        OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
 138   1        OLED_WrCmd(0x3f);//--1/64 duty
 139   1        OLED_WrCmd(0xd3);//-set display offset        Shift Mapping RAM Counter (0x00~0x3F)
 140   1        OLED_WrCmd(0x00);//-not offset
 141   1        OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
 142   1        OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
 143   1        OLED_WrCmd(0xd9);//--set pre-charge period
 144   1        OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 145   1        OLED_WrCmd(0xda);//--set com pins hardware configuration
 146   1        OLED_WrCmd(0x12);
 147   1        OLED_WrCmd(0xdb);//--set vcomh
 148   1        OLED_WrCmd(0x40);//Set VCOM Deselect Level
 149   1        OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
 150   1        OLED_WrCmd(0x02);//
 151   1        OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
 152   1        OLED_WrCmd(0x14);//--set(0x10) disable
 153   1        OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
 154   1        OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
 155   1        OLED_WrCmd(0xaf);//--turn on oled panel
 156   1              
 157   1        OLED_Fill(0x00);  //初始清屏
 158   1      
 159   1        OLED_Set_Pos(0,0); 
 160   1      
 161   1      }
 162          
 163          
 164          void OLED_WrDat(unsigned char dat)
 165          {
 166   1        unsigned char i=8;
 167   1          //LCD_CS=0;;
 168   1          LCD_DC=1;;
 169   1          LCD_SCL=0;;
 170   1          delay_us(1);            
 171   1          while(i--)
 172   1          {
 173   2            if(dat&0x80){LCD_SDA=1;}
 174   2            else{LCD_SDA=0;}
 175   2            LCD_SCL=1; 
 176   2            delay_us(1);      
 177   2            //asm("nop");            
C51 COMPILER V9.60.0.0   OLED                                                              04/19/2022 15:33:23 PAGE 4   

 178   2            LCD_SCL=0;;    
 179   2            dat<<=1;    
 180   2          }
 181   1          //LCD_CS=1;
 182   1      }
 183          
 184          
 185          void OLED_WrCmd(unsigned char cmd)
 186          {
 187   1        unsigned char i=8;
 188   1        
 189   1        //LCD_CS=0;;
 190   1        LCD_DC=0;;
 191   1        LCD_SCL=0;;
 192   1        delay_us(1);    
 193   1        while(i--)
 194   1        {
 195   2          if(cmd&0x80){LCD_SDA=1;}
 196   2          else{LCD_SDA=0;;}
 197   2          LCD_SCL=1;;
 198   2          delay_us(1);                    
 199   2          LCD_SCL=0;;    
 200   2          cmd<<=1;;   
 201   2        }     
 202   1        //LCD_CS=1;
 203   1      
 204   1      }
 205          
 206          void OLED_Set_Pos(unsigned char x, unsigned char y)
 207          { 
 208   1        OLED_WrCmd(0xb0+y);
 209   1        OLED_WrCmd(((x&0xf0)>>4)|0x10);
 210   1        OLED_WrCmd((x&0x0f)); 
 211   1      } 
 212          
 213          
 214          void OLED_Fill(unsigned char bmp_data)
 215          {
 216   1        unsigned char y,x;
 217   1        
 218   1        for(y=0;y<8;y++)
 219   1        {
 220   2          OLED_WrCmd(0xb0+y);
 221   2          OLED_WrCmd(0x01);
 222   2          OLED_WrCmd(0x10);
 223   2          for(x=0;x<X_WIDTH;x++)
 224   2            OLED_WrDat(bmp_data);
 225   2        }
 226   1      }
 227          
 228          void OLED_CLS(void)
 229          {
 230   1        unsigned char y,x;    
 231   1        for(y=0;y<8;y++)
 232   1        {
 233   2          OLED_WrCmd(0xb0+y);
 234   2          OLED_WrCmd(0x01);
 235   2          OLED_WrCmd(0x10); 
 236   2          for(x=0;x<X_WIDTH;x++)
 237   2            OLED_WrDat(0);
 238   2        }
 239   1      }
C51 COMPILER V9.60.0.0   OLED                                                              04/19/2022 15:33:23 PAGE 5   

 240          
 241          
 242          void OLED_P6x8Str(unsigned char x,unsigned char y,unsigned char ch[])
 243          {
 244   1        unsigned char c=0,i=0,j=0;      
 245   1        while (ch[j]!='\0')
 246   1        {    
 247   2          c =ch[j]-32;
 248   2          if(x>126){x=0;y++;}
 249   2          OLED_Set_Pos(x,y);    
 250   2          for(i=0;i<6;i++)     
 251   2            OLED_WrDat(F6x8[c][i]);  
 252   2          x+=6;
 253   2          j++;
 254   2        }
 255   1      }
 256          
 257          
 258          void OLED_P6x8Str_INV(unsigned char x,unsigned char y,unsigned char ch[])
 259          {
 260   1        unsigned char c=0,i=0,j=0;      
 261   1        while (ch[j]!='\0')
 262   1        {    
 263   2          c =ch[j]-32;
 264   2          if(x>126){x=0;y++;}
 265   2          OLED_Set_Pos(x,y);    
 266   2          for(i=0;i<6;i++)     
 267   2            OLED_WrDat(~F6x8[c][i]);  
 268   2          x+=6;
 269   2          j++;
 270   2        }
 271   1      }
 272          
 273          
 274          void OLED_P6x8Num(unsigned char x,unsigned char y,unsigned int num)
 275          {
 276   1              unsigned char mytxt[4];
 277   1              mytxt[3]='\0';
 278   1              mytxt[2]=(num%10)+0x30;
 279   1              mytxt[1]=((num/10)%10)+0x30;
 280   1              mytxt[0]=(num/100)+0x30;
 281   1              OLED_P6x8Str(x,y,mytxt);
 282   1      }
 283          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    916    ----
   CONSTANT SIZE    =    552    ----
   XDATA SIZE       =   ----      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
